{% schema %}
{
  "name": "V√≤ng Quay May M·∫Øn",
  "settings": [
    {
      "type": "text",
      "id": "button_text",
      "label": "Ch·ªØ tr√™n n√∫t quay",
      "default": "QUAY"
    },
    {
      "type": "color",
      "id": "button_bg_color",
      "label": "M√†u n·ªÅn n√∫t",
      "default": "#fcbf49"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "M√†u ch·ªØ n√∫t",
      "default": "#000000"
    }
  ],
  "blocks": [
    {
      "type": "prize",
      "name": "Ph·∫ßn th∆∞·ªüng",
      "settings": [
        {
          "type": "text",
          "id": "text",
          "label": "T√™n ph·∫ßn th∆∞·ªüng",
          "default": "Gi·∫£m 10%"
        },
        {
          "type": "color",
          "id": "color",
          "label": "M√†u ph·∫ßn th∆∞·ªüng",
          "default": "#f8f9fa"
        },
        {
          "type": "text",
          "id": "code",
          "label": "M√£ gi·∫£m gi√°",
          "default": "LUCKY10"
        },
        {
          "type": "number",
          "id": "probability",
          "label": "X√°c su·∫•t (%)",
          "default": 20
        }
      ]
    }
  ],
  "max_blocks": 12,
  "presets": [
    {
      "name": "V√≤ng Quay May M·∫Øn",
      "category": "Khuy·∫øn m√£i",
      "blocks": [
        { "type": "prize" },
        { "type": "prize" },
        { "type": "prize" }
      ]
    }
  ]
}
{% endschema %}

<!-- Modal k·∫øt qu·∫£ -->
<div id="lucky-wheel-modal" class="wheel-modal" style="display: none;">
  <div class="wheel-modal-box">
    <h2>üéâ B·∫°n ƒë√£ tr√∫ng th∆∞·ªüng!</h2>
    <p id="modal-prize-text"></p>
    <button onclick="document.getElementById('lucky-wheel-modal').style.display='none'">ƒê√≥ng</button>
  </div>
</div>

<!-- V√≤ng quay -->
<div id="lucky-wheel-container">
  <div class="lucky-wheel-frame">
    <canvas id="lucky-wheel-canvas" width="600" height="600"></canvas>
    <div id="lucky-wheel-spin">{{ section.settings.button_text }}</div>
    <div id="lucky-wheel-pointer"></div>
  </div>
</div>

<style>
  .lucky-wheel-frame {
    position: relative;
    width: 90vw;
    max-width: 600px;
    height: 90vw;
    max-height: 600px;
    margin: 60px auto;
    border-radius: 50%;
    background: radial-gradient(circle, #dddddd, #e9ecef);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
  }

  #lucky-wheel-canvas {
    width: 100% !important;
    height: 100% !important;
    border-radius: 50%;
    z-index: 1;
    display: block;
  }

  #lucky-wheel-spin {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: {{ section.settings.button_bg_color }};
    color: {{ section.settings.button_text_color }};
    width: 18vw;
    height: 18vw;
    max-width: 100px;
    max-height: 100px;
    min-width: 60px;
    min-height: 60px;
    border-radius: 50%;
    font-size: 1rem;
    font-weight: bold;
    text-transform: uppercase;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 3;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.25);
    transition: 0.3s ease;
  }

  #lucky-wheel-spin:hover {
    transform: translate(-50%, -50%) scale(1.05);
  }

  #lucky-wheel-pointer {
    position: absolute;
    top: 2%;
    left: 50%;
    transform: translateX(-50%);
    width: 0;
    height: 0;
    border-left: 18px solid transparent;
    border-right: 18px solid transparent;
    border-top: 32px solid #EEAF2E;
    max-width: 30px;
    max-height: 35px;
    z-index: 4;
}

  .wheel-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.6);
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }

  .wheel-modal-box {
    background: #111;
    padding: 20px;
    border-radius: 12px;
    text-align: center;
    max-width: 90vw;
    animation: zoomIn 0.4s ease-out;
  }

  .wheel-modal-box h2 {
    font-size: 5vw;
    color: #f2f2f2;
  }

  .wheel-modal-box #modal-prize-text {
    font-size: 4.5vw;
    font-weight: bold;
    color: #fab320;
  }

  .wheel-modal-box #modal-prize-code {
    background: #f1f1f1;
    padding: 3vw;
    border-radius: 6px;
    font-weight: bold;
    font-size: 4vw;
    margin: 2vw 0;
  }

  .wheel-modal-box button {
    background: #f2f2f2;
    color: #111;
    border: none;
    padding: 12px 30px;
    border-radius: 6px;
    font-size: 4vw;
    cursor: pointer;
  }

  @keyframes zoomIn {
    from { transform: scale(0.6); opacity: 0; }
    to { transform: scale(1); opacity: 1; }
  }

  @media (min-width: 768px) {
    .wheel-modal-box h2 {
      font-size: 24px;
    }

    .wheel-modal-box #modal-prize-text {
      font-size: 25px;
    }

    .wheel-modal-box #modal-prize-code {
      font-size: 18px;
    }

    .wheel-modal-box button {
      font-size: 16px;
    }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function () {
  const canvas = document.getElementById('lucky-wheel-canvas');
  const ctx = canvas.getContext('2d');
  const centerX = canvas.width / 2;
  const centerY = canvas.height / 2;
  const radius = Math.min(centerX, centerY) * 0.9;

  const prizes = [
    {% for block in section.blocks %}
      {
        text: "{{ block.settings.text | escape }}",
        color: "{{ block.settings.color }}",
        code: "{{ block.settings.code }}",
        probability: {{ block.settings.probability }}
      }{% unless forloop.last %},{% endunless %}
    {% endfor %}
  ];

  const totalProb = prizes.reduce((sum, p) => sum + p.probability, 0);
  if (totalProb !== 100) {
    prizes.forEach(p => p.probability = (p.probability / totalProb) * 100);
  }

  let currentAngle = 0;
  const equalAngle = (Math.PI * 2) / prizes.length;
  prizes.forEach(p => {
    p.startAngle = currentAngle;
    p.angle = equalAngle;
    p.endAngle = currentAngle + equalAngle;
    currentAngle = p.endAngle;
  });

  function drawWheel() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    prizes.forEach(p => {
      ctx.beginPath();
      ctx.moveTo(centerX, centerY);
      ctx.arc(centerX, centerY, radius, p.startAngle, p.endAngle);
      ctx.fillStyle = p.color;
      ctx.fill();
      ctx.strokeStyle = '#000';
      ctx.stroke();

      ctx.save();
      ctx.translate(centerX, centerY);
      ctx.rotate(p.startAngle + p.angle / 2);
      ctx.textAlign = 'right';
      ctx.fillStyle = '#000';
      ctx.font = '14px Font-1736240127176';
      ctx.fillText(p.text, radius * 0.85, 0);
      ctx.restore();
    });
  }

  drawWheel();

  let isSpinning = false;
  let startAngle = 0;
  let currentRotation = 0;

  document.getElementById('lucky-wheel-spin').addEventListener('click', function () {
    if (isSpinning) return;
    isSpinning = true;

    const rnd = Math.random() * 100;
    let cumulative = 0;
    let selectedPrize = prizes[0];
    for (let prize of prizes) {
      cumulative += prize.probability;
      if (rnd <= cumulative) {
        selectedPrize = prize;
        break;
      }
    }

    const midAngle = selectedPrize.startAngle + selectedPrize.angle / 2;
    const stopAt = (Math.PI * 3 / 2 - midAngle + Math.PI * 2) % (Math.PI * 2);
    const fullRotations = 5 + Math.floor(Math.random() * 3);
    const finalAngle = fullRotations * Math.PI * 2 + stopAt;

    animateSpin(finalAngle, selectedPrize);
  });

  function animateSpin(targetAngle, selectedPrize) {
    const duration = 5000;
    const frameRate = 1000 / 60;
    const totalFrames = duration / frameRate;
    let frame = 0;
    const start = currentRotation;
    const change = targetAngle - currentRotation;

    const spinInterval = setInterval(() => {
      frame++;
      if (frame >= totalFrames) {
        clearInterval(spinInterval);
        isSpinning = false;
        currentRotation = targetAngle;

        setTimeout(() => {
          document.getElementById('modal-prize-text').innerText = `${selectedPrize.text}`;
          document.getElementById('lucky-wheel-modal').style.display = 'flex';
        }, 500);
        return;
      }

      const easedAngle = easeOutCubic(frame, start, change, totalFrames);
      startAngle = easedAngle;
      ctx.save();
      ctx.translate(centerX, centerY);
      ctx.rotate(startAngle);
      ctx.translate(-centerX, -centerY);
      drawWheel();
      ctx.restore();
    }, frameRate);
  }

  function easeOutCubic(t, b, c, d) {
    t /= d;
    t--;
    return c * (t * t * t + 1) + b;
  }
});
</script>
