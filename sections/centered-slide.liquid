{{ 'centered-slide.css' | asset_url | stylesheet_tag }}
<div class="slider">
  <div class="list">
    {% for block in section.blocks %}
      <div class="item">
        <a href="{{ block.settings.link }}">
          <picture>
            <source media="(min-width:768px)" srcset="{{ block.settings.desktop_image | img_url: 'master' }}">
            <img src="{{ block.settings.mobile_image | img_url: '1024x1024' }}" alt="{{ block.settings.mobile_image.alt }}">
          </picture>
        </a>
      </div>
    {% endfor %}
  </div>
  <div class="buttons">
    <button id="prev">{% render "svg-chevron-left" %}</button>
    <button id="next">{% render "svg-chevron-right" %}</button>
  </div>
  <ul class="dots">
    {% for block in section.blocks %}
      <li class="{% if forloop.first %}active{% endif %}"></li>
    {% endfor %}
  </ul>
</div>

{% schema %}
{
  "name": "Centered Slide",
  "settings": [],
  "blocks": [
    {
      "type": "slide",
      "name": "Slide",
      "settings": [
        {
          "type": "image_picker",
          "id": "desktop_image",
          "label": "Desktop image"
        },
        {
          "type": "image_picker",
          "id": "mobile_image",
          "label": "Mobile image"
        },
        {
          "type": "url",
          "id": "link",
          "label": "Slide Link"
        },
        {
          "type": "text",
          "id": "alt_text",
          "label": "Alt Text"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Centered Slide",
      "category": "Slideshow"
    }
  ]
}
{% endschema %}

<script>
let slider = document.querySelector('.slider .list');
let items = document.querySelectorAll('.slider .list .item');
let next = document.getElementById('next');
let prev = document.getElementById('prev');
let dots = document.querySelectorAll('.slider .dots li');

let lengthItems = items.length - 1;
let active = 0;
next.onclick = function(){
    active = active + 1 <= lengthItems ? active + 1 : 0;
    reloadSlider();
}
prev.onclick = function(){
    active = active - 1 >= 0 ? active - 1 : lengthItems;
    reloadSlider();
}
// let refreshInterval = setInterval(()=> {next.click()}, 3000);
function reloadSlider(){
    slider.style.left = -items[active].offsetLeft + 'px';
    // 
    let last_active_dot = document.querySelector('.slider .dots li.active');
    last_active_dot.classList.remove('active');
    dots[active].classList.add('active');

    // clearInterval(refreshInterval);
    // refreshInterval = setInterval(()=> {next.click()}, 3000);
}

dots.forEach((li, key) => {
    li.addEventListener('click', ()=>{
         active = key;
         reloadSlider();
    })
})
window.onresize = function(event) {
    reloadSlider();
};
  
let startX = 0;
let endX = 0;
let isDragging = false;
const dragThreshold = 10; // Ngưỡng để xác định kéo

slider.addEventListener('mousedown', (e) => {
    startX = e.clientX;
    isDragging = false; // Reset trạng thái kéo
    e.preventDefault(); // Ngăn hành vi mặc định như chọn văn bản
});

slider.addEventListener('mousemove', (e) => {
    if (e.buttons === 1) { // Chỉ kích hoạt khi chuột trái đang giữ
        endX = e.clientX;
        if (Math.abs(startX - endX) > dragThreshold) {
            isDragging = true; // Đánh dấu là kéo nếu vượt ngưỡng
        }
    }
});

slider.addEventListener('mouseup', (e) => {
    if (isDragging) {
        handleSwipe(); // Xử lý vuốt nếu đang kéo
    }
    startX = 0;
    endX = 0;
});

slider.addEventListener('touchstart', (e) => {
    startX = e.touches[0].clientX;
    isDragging = false; // Reset trạng thái kéo
});

slider.addEventListener('touchmove', (e) => {
    endX = e.touches[0].clientX;
    if (Math.abs(startX - endX) > dragThreshold) {
        isDragging = true; // Đánh dấu là kéo nếu vượt ngưỡng
    }
});

slider.addEventListener('touchend', (e) => {
    if (isDragging) {
        handleSwipe(); // Xử lý vuốt nếu đang kéo
    }
    startX = 0;
    endX = 0;
});

slider.addEventListener('click', (e) => {
    if (isDragging) {
        e.preventDefault(); // Ngăn click nếu đang kéo
    }
});

function handleSwipe() {
    if (startX - endX > dragThreshold) {
        next.click(); // Kéo sang trái
    } else if (endX - startX > dragThreshold) {
        prev.click(); // Kéo sang phải
    }
}
</script>