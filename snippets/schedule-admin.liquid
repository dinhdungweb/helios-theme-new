{% layout 'theme' %}
{% comment %} {% if customer and customer.tags contains 'schedule-admin' %} {% endcomment %}
<div class="admin-booking">
  <div class="admin-header">
    <h2>Quản lý Lịch Hẹn</h2>
    <div class="admin-actions">
      <div class="search-filter">
        <input type="text" id="search-bookings" placeholder="Tìm kiếm theo tên hoặc email...">
        <select id="filter-service">
          <option value="">Tất cả dịch vụ</option>
          <option value="Đến showroom">Đến showroom</option>
          <option value="Hẹn trực tuyến">Hẹn trực tuyến</option>
        </select>
        <select id="filter-status">
          <option value="">Tất cả trạng thái</option>
          <option value="pending">Đang chờ</option>
          <option value="confirmed">Đã xác nhận</option>
          <option value="completed">Hoàn thành</option>
          <option value="cancelled">Đã hủy</option>
        </select>
      </div>
      <button id="refresh-btn" class="refresh-button">Làm mới dữ liệu</button>
    </div>
  </div>

  <div class="booking-stats">
    <div class="stat-item">
      <span class="stat-number" id="total-bookings">0</span>
      <span class="stat-label">Tổng số lịch hẹn</span>
    </div>
    <div class="stat-item">
      <span class="stat-number" id="pending-bookings">0</span>
      <span class="stat-label">Lịch chờ xác nhận</span>
    </div>
    <div class="stat-item">
      <span class="stat-number" id="today-bookings">0</span>
      <span class="stat-label">Lịch hẹn hôm nay</span>
    </div>
  </div>

  <div class="table-container">
    <table class="booking-table">
      <thead>
        <tr>
          <th class="sortable" data-sort="name">Họ Tên</th>
          <th>Liên hệ</th>
          <th class="sortable" data-sort="date">Ngày & Giờ</th>
          <th>Dịch Vụ</th>
          <th>Chi tiết</th>
          <th>Trạng thái</th>
          <th>Thao Tác</th>
        </tr>
      </thead>
      <tbody id="booking-list"></tbody>
    </table>
  </div>

  <!-- Modal chi tiết lịch hẹn -->
  <div id="booking-modal" class="booking-modal">
    <div class="modal-content">
      <span class="close-modal">&times;</span>
      <h3>Chi tiết lịch hẹn</h3>
      <div id="modal-content"></div>
    </div>
  </div>

  <!-- Firebase SDK (using Firebase 9+) -->
  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-app.js";
    import { getFirestore, collection, getDocs, doc, deleteDoc, updateDoc, query, orderBy, where } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-firestore.js";
    import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-auth.js";

    const firebaseConfig = {
      apiKey: "AIzaSyDv1-3cfXFveRN9hZOqBQI_jIVLj6ujoTM",
      authDomain: "shopify-booking-web.firebaseapp.com",
      projectId: "shopify-booking-web",
      storageBucket: "shopify-booking-web.firebasestorage.app",
      messagingSenderId: "629820668726",
      appId: "1:629820668726:web:fded3b19355524d2935197",
      measurementId: "G-V9W22S3C8S"
    };

    // Initialize Firebase
    const app = initializeApp(firebaseConfig);
    const db = getFirestore(app);
    const auth = getAuth(app);

    // Hàm chuyển đổi ngày sang tiếng Việt
    function formatDateToVietnamese(dateString) {
      const parts = dateString.split(' ');
      const dayOfWeek = `${parts[0]} ${parts[1]}`;  // Ví dụ "Thu 7"
      const month = parts[2];
      const day = parts[3];
      const monthMap = {
        Jan: 'Tháng 1', Feb: 'Tháng 2', Mar: 'Tháng 3', Apr: 'Tháng 4',
        May: 'Tháng 5', Jun: 'Tháng 6', Jul: 'Tháng 7', Aug: 'Tháng 8',
        Sep: 'Tháng 9', Oct: 'Tháng 10', Nov: 'Tháng 11', Dec: 'Tháng 12'
      };
      return `${dayOfWeek} ${day} ${monthMap[month] || month}`;
    }
    
    // Biến lưu trữ danh sách lịch hẹn
    let allBookings = [];
    
    // Hàm tải dữ liệu các lịch hẹn từ Firestore và hiển thị lên bảng
    async function loadBookings() {
      try {
        const querySnapshot = await getDocs(collection(db, "bookings"));
        const bookings = [];
        
        querySnapshot.forEach((doc) => {
          const data = doc.data();
          bookings.push({
            id: doc.id,
            ...data,
            status: data.status || 'pending' // Mặc định là 'pending' nếu không có trạng thái
          });
        });
        
        // Lưu tất cả bookings để tìm kiếm và lọc sau này
        allBookings = bookings;
        
        // Cập nhật số liệu thống kê
        updateStatistics(bookings);
        
        // Hiển thị dữ liệu
        displayBookings(bookings);
      } catch (error) {
        console.error("Lỗi khi tải lịch hẹn:", error);
        showNotification("Lỗi khi tải dữ liệu lịch hẹn", "error");
      }
    }
    
    // Cập nhật số liệu thống kê
    function updateStatistics(bookings) {
      document.getElementById('total-bookings').textContent = bookings.length;
      
      const pendingBookings = bookings.filter(booking => booking.status === 'pending').length;
      document.getElementById('pending-bookings').textContent = pendingBookings;
      
      // Đếm lịch hẹn ngày hôm nay
      const today = new Date();
      const todayString = today.toDateString();
      const todayBookings = bookings.filter(booking => {
        // Chuyển ngày booking sang Date object để so sánh
        const dateParts = booking.date.split(' ');
        const day = parseInt(dateParts[3]);
        const monthMap = {
          Jan: 0, Feb: 1, Mar: 2, Apr: 3, May: 4, Jun: 5,
          Jul: 6, Aug: 7, Sep: 8, Oct: 9, Nov: 10, Dec: 11
        };
        const month = monthMap[dateParts[2]];
        const bookingDate = new Date(today.getFullYear(), month, day);
        return bookingDate.toDateString() === todayString;
      }).length;
      
      document.getElementById('today-bookings').textContent = todayBookings;
    }
    
    // Hàm hiển thị lịch hẹn
    function displayBookings(bookings) {
      const bookingList = document.getElementById("booking-list");
      bookingList.innerHTML = '';
      
      if (bookings.length === 0) {
        bookingList.innerHTML = `<tr><td colspan="7" class="no-data">Không có lịch hẹn nào</td></tr>`;
        return;
      }
      
      bookings.forEach((booking) => {
        const row = document.createElement('tr');
        row.classList.add(`status-${booking.status}`);
        const formattedDate = formatDateToVietnamese(booking.date);
        
        // Tạo badge cho trạng thái
        const statusBadge = getStatusBadge(booking.status);
        
        row.innerHTML = `
          <td>
            <div class="user-info">
              <div class="user-name">${booking.first_name} ${booking.last_name}</div>
            </div>
          </td>
          <td>
            <div class="contact-info">
              <div>${booking.email}</div>
              <div>${booking.phone}</div>
            </div>
          </td>
          <td>
            <div class="date-time">
              <div class="date">${formattedDate}</div>
              <div class="time">${booking.time}</div>
            </div>
          </td>
          <td>${booking.service}</td>
          <td>
            <button class="view-details-button" data-booking-id="${booking.id}">Xem chi tiết</button>
          </td>
          <td>
            <div class="status-selector">
              ${statusBadge}
              <select class="status-dropdown" data-booking-id="${booking.id}">
                <option value="pending" ${booking.status === 'pending' ? 'selected' : ''}>Đang chờ</option>
                <option value="confirmed" ${booking.status === 'confirmed' ? 'selected' : ''}>Đã xác nhận</option>
                <option value="completed" ${booking.status === 'completed' ? 'selected' : ''}>Hoàn thành</option>
                <option value="cancelled" ${booking.status === 'cancelled' ? 'selected' : ''}>Đã hủy</option>
              </select>
            </div>
          </td>
          <td class="actions">
            <button class="edit-button" data-booking-id="${booking.id}">
              <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z"/>
              </svg>
            </button>
            <button class="delete-button" data-booking-id="${booking.id}">
              <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
              </svg>
            </button>
          </td>
        `;
        
        bookingList.appendChild(row);
      });
      
      // Thêm event listeners cho các nút và dropdown
      addEventListeners();
    }
    
    // Tạo badge cho trạng thái
    function getStatusBadge(status) {
      const statusMap = {
        'pending': { label: 'Đang chờ', class: 'status-pending' },
        'confirmed': { label: 'Đã xác nhận', class: 'status-confirmed' },
        'completed': { label: 'Hoàn thành', class: 'status-completed' },
        'cancelled': { label: 'Đã hủy', class: 'status-cancelled' }
      };
      
      const statusInfo = statusMap[status] || statusMap['pending'];
      return `<span class="status-badge ${statusInfo.class}">${statusInfo.label}</span>`;
    }
    
    // Thêm event listeners
    function addEventListeners() {
      // Xử lý nút xóa
      document.querySelectorAll('.delete-button').forEach(button => {
        button.addEventListener('click', function() {
          const bookingId = this.getAttribute('data-booking-id');
          confirmDelete(bookingId);
        });
      });
      
      // Xử lý nút sửa
      document.querySelectorAll('.edit-button').forEach(button => {
        button.addEventListener('click', function() {
          const bookingId = this.getAttribute('data-booking-id');
          showEditModal(bookingId);
        });
      });
      
      // Xử lý dropdown trạng thái
      document.querySelectorAll('.status-dropdown').forEach(dropdown => {
        dropdown.addEventListener('change', function() {
          const bookingId = this.getAttribute('data-booking-id');
          const newStatus = this.value;
          updateBookingStatus(bookingId, newStatus);
        });
      });
      
      // Xử lý nút xem chi tiết
      document.querySelectorAll('.view-details-button').forEach(button => {
        button.addEventListener('click', function() {
          const bookingId = this.getAttribute('data-booking-id');
          showBookingDetails(bookingId);
        });
      });
    }
    
    // Hàm xác nhận xóa
    function confirmDelete(bookingId) {
      if (confirm("Bạn có chắc chắn muốn xóa lịch hẹn này không?")) {
        deleteBooking(bookingId);
      }
    }
    
    // Hiển thị chi tiết lịch hẹn
    function showBookingDetails(bookingId) {
      const booking = allBookings.find(b => b.id === bookingId);
      if (!booking) return;
      
      const modal = document.getElementById('booking-modal');
      const modalContent = document.getElementById('modal-content');
      
      const formattedDate = formatDateToVietnamese(booking.date);
      
      let detailsHTML = `
        <div class="booking-details">
          <div class="detail-group">
            <h4>Thông tin khách hàng</h4>
            <p><strong>Họ và tên:</strong> ${booking.first_name} ${booking.last_name}</p>
            <p><strong>Email:</strong> ${booking.email}</p>
            <p><strong>Điện thoại:</strong> ${booking.phone}</p>
          </div>
          
          <div class="detail-group">
            <h4>Thông tin cuộc hẹn</h4>
            <p><strong>Ngày:</strong> ${formattedDate}</p>
            <p><strong>Giờ:</strong> ${booking.time}</p>
            <p><strong>Loại dịch vụ:</strong> ${booking.service}</p>
            <p><strong>Trạng thái:</strong> ${getStatusLabel(booking.status)}</p>
          </div>
      `;
      
      // Thông tin chi tiết về nhu cầu
      detailsHTML += `<div class="detail-group">
        <h4>Chi tiết yêu cầu</h4>`;
      
      if (booking.specific_product) {
        detailsHTML += `<p><strong>Sản phẩm muốn xem:</strong> ${booking.specific_product}</p>`;
      }
      
      if (booking.product_types && booking.product_types.length) {
        detailsHTML += `<p><strong>Loại sản phẩm:</strong> ${booking.product_types.join(', ')}</p>`;
      }
      
      if (booking.needs && booking.needs.length) {
        detailsHTML += `<p><strong>Nhu cầu:</strong> ${booking.needs.join(', ')}</p>`;
      }
      
      if (booking.styles && booking.styles.length) {
        detailsHTML += `<p><strong>Phong cách:</strong> ${booking.styles.join(', ')}</p>`;
      }
      
      if (booking.budget) {
        detailsHTML += `<p><strong>Ngân sách:</strong> ${booking.budget}</p>`;
      }
      
      detailsHTML += `<p><strong>Ghi chú:</strong> ${booking.notes || 'Không có ghi chú'}</p>
      </div>`;
      
      detailsHTML += `
        <div class="modal-actions">
          <button class="confirm-button" data-booking-id="${bookingId}">Xác nhận lịch hẹn</button>
          <button class="cancel-button" data-booking-id="${bookingId}">Hủy lịch hẹn</button>
        </div>
      </div>
      `;
      
      modalContent.innerHTML = detailsHTML;
      modal.style.display = 'block';
      
      // Thêm event listener cho nút đóng modal
      document.querySelector('.close-modal').addEventListener('click', () => {
        modal.style.display = 'none';
      });
      
      // Thêm event listener cho nút xác nhận và hủy lịch hẹn
      document.querySelector('.confirm-button').addEventListener('click', () => {
        updateBookingStatus(bookingId, 'confirmed');
        modal.style.display = 'none';
      });
      
      document.querySelector('.cancel-button').addEventListener('click', () => {
        updateBookingStatus(bookingId, 'cancelled');
        modal.style.display = 'none';
      });
      
      // Đóng modal khi click bên ngoài
      window.addEventListener('click', (event) => {
        if (event.target === modal) {
          modal.style.display = 'none';
        }
      });
    }
    
    // Lấy label cho trạng thái
    function getStatusLabel(status) {
      const statusMap = {
        'pending': 'Đang chờ xác nhận',
        'confirmed': 'Đã xác nhận',
        'completed': 'Hoàn thành',
        'cancelled': 'Đã hủy'
      };
      
      return statusMap[status] || 'Đang chờ xác nhận';
    }
    
    // Hàm hiển thị modal chỉnh sửa
    function showEditModal(bookingId) {
      const booking = allBookings.find(b => b.id === bookingId);
      if (!booking) return;
      
      const modal = document.getElementById('booking-modal');
      const modalContent = document.getElementById('modal-content');
      
      modalContent.innerHTML = `
        <h3>Chỉnh sửa lịch hẹn</h3>
        <form id="edit-form">
          <div class="form-group">
            <label>Ghi chú:</label>
            <textarea id="edit-notes" rows="4">${booking.notes || ''}</textarea>
          </div>
          <div class="form-group">
            <label>Trạng thái:</label>
            <select id="edit-status">
              <option value="pending" ${booking.status === 'pending' ? 'selected' : ''}>Đang chờ</option>
              <option value="confirmed" ${booking.status === 'confirmed' ? 'selected' : ''}>Đã xác nhận</option>
              <option value="completed" ${booking.status === 'completed' ? 'selected' : ''}>Hoàn thành</option>
              <option value="cancelled" ${booking.status === 'cancelled' ? 'selected' : ''}>Đã hủy</option>
            </select>
          </div>
          <div class="form-actions">
            <button type="button" id="save-edit" data-booking-id="${bookingId}">Lưu thay đổi</button>
            <button type="button" id="cancel-edit">Hủy</button>
          </div>
        </form>
      `;
      
      modal.style.display = 'block';
      
      // Thêm event listener cho nút đóng modal
      document.querySelector('.close-modal').addEventListener('click', () => {
        modal.style.display = 'none';
      });
      
      // Thêm event listener cho nút lưu và hủy
      document.getElementById('save-edit').addEventListener('click', function() {
        const bookingId = this.getAttribute('data-booking-id');
        const notes = document.getElementById('edit-notes').value;
        const status = document.getElementById('edit-status').value;
        
        updateBookingDetails(bookingId, { notes, status });
        modal.style.display = 'none';
      });
      
      document.getElementById('cancel-edit').addEventListener('click', () => {
        modal.style.display = 'none';
      });
    }
    
    // Hàm xóa lịch hẹn
    async function deleteBooking(bookingId) {
      try {
        await deleteDoc(doc(db, "bookings", bookingId));
        showNotification("Lịch hẹn đã được xóa thành công", "success");
        loadBookings(); // Tải lại danh sách
      } catch (error) {
        console.error("Error removing booking:", error);
        showNotification("Lỗi khi xóa lịch hẹn", "error");
      }
    }
    
    // Hàm cập nhật trạng thái lịch hẹn
    async function updateBookingStatus(bookingId, status) {
      try {
        await updateDoc(doc(db, "bookings", bookingId), { status });
        showNotification(`Trạng thái lịch hẹn đã được cập nhật thành ${getStatusLabel(status)}`, "success");
        
        // Cập nhật lại trong danh sách
        const bookingIndex = allBookings.findIndex(b => b.id === bookingId);
        if (bookingIndex !== -1) {
          allBookings[bookingIndex].status = status;
          displayBookings(allBookings);
        }
      } catch (error) {
        console.error("Error updating booking status:", error);
        showNotification("Lỗi khi cập nhật trạng thái", "error");
      }
    }
    
    // Hàm cập nhật thông tin lịch hẹn
    async function updateBookingDetails(bookingId, updates) {
      try {
        await updateDoc(doc(db, "bookings", bookingId), updates);
        showNotification("Thông tin lịch hẹn đã được cập nhật", "success");
        
        // Cập nhật lại trong danh sách
        const bookingIndex = allBookings.findIndex(b => b.id === bookingId);
        if (bookingIndex !== -1) {
          allBookings[bookingIndex] = { ...allBookings[bookingIndex], ...updates };
          displayBookings(allBookings);
        }
      } catch (error) {
        console.error("Error updating booking details:", error);
        showNotification("Lỗi khi cập nhật thông tin", "error");
      }
    }
    
    // Hiển thị thông báo
    function showNotification(message, type = 'info') {
      const notification = document.createElement('div');
      notification.className = `notification notification-${type}`;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      // Hiệu ứng hiển thị
      setTimeout(() => {
        notification.classList.add('show');
      }, 10);
      
      // Tự động ẩn sau 3 giây
      setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
          document.body.removeChild(notification);
        }, 300);
      }, 3000);
    }
    
    // Xử lý tìm kiếm và lọc
    document.getElementById('search-bookings').addEventListener('input', filterBookings);
    document.getElementById('filter-service').addEventListener('change', filterBookings);
    document.getElementById('filter-status').addEventListener('change', filterBookings);
    
    // Nút làm mới dữ liệu
    document.getElementById('refresh-btn').addEventListener('click', loadBookings);
    
    // Hàm lọc lịch hẹn
    function filterBookings() {
      const searchTerm = document.getElementById('search-bookings').value.toLowerCase();
      const serviceFilter = document.getElementById('filter-service').value;
      const statusFilter = document.getElementById('filter-status').value;
      
      const filteredBookings = allBookings.filter(booking => {
        const fullName = `${booking.first_name} ${booking.last_name}`.toLowerCase();
        const email = booking.email.toLowerCase();
        
        // Lọc theo tìm kiếm
        const matchesSearch = searchTerm === '' || 
          fullName.includes(searchTerm) || 
          email.includes(searchTerm);
        
        // Lọc theo dịch vụ
        const matchesService = serviceFilter === '' || booking.service === serviceFilter;
        
        // Lọc theo trạng thái
        const matchesStatus = statusFilter === '' || booking.status === statusFilter;
        
        return matchesSearch && matchesService && matchesStatus;
      });
      
      displayBookings(filteredBookings);
    }
    
    // Khởi tạo
    loadBookings();
  </script>

</div>
{% comment %} {% else %}
  <p>Bạn không có quyền truy cập vào trang quản lý lịch hẹn. Vui lòng đăng nhập với tài khoản hợp lệ.</p>
{% endif %} {% endcomment %}



<style>
  .admin-booking {
    max-width: 100%;
    margin: 0 auto;
    padding: 50px 20px;
    background-color: transparent;
    color: white;
  }

  .admin-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    flex-wrap: wrap;
    gap: 20px;
  }

  .admin-actions {
    display: flex;
    gap: 15px;
    align-items: center;
  }

  .search-filter {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
  }

  .search-filter input,
  .search-filter select {
    padding: 8px 12px;
    background-color: #222;
    border: 1px solid #444;
    color: white;
  }

  .booking-stats {
    display: flex;
    gap: 20px;
    margin-bottom: 30px;
    flex-wrap: wrap;
  }

  .stat-item {
    background-color: #1a1a1a;
    padding: 20px;
    flex: 1;
    min-width: 180px;
    text-align: center;
    border: 1px solid #333;
  }

  .stat-number {
    display: block;
    font-size: 28px;
    font-weight: 600;
    margin-bottom: 5px;
    color: #f0f0f0;
  }

  .stat-label {
    color: #aaa;
    font-size: 14px;
  }

  .table-container {
    overflow-x: auto;
    margin-bottom: 40px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
    background-color: #1a1a1a;
    border: 1px solid #333;
  }

  .booking-table {
    width: 100%;
    border-collapse: collapse;
    margin: 0;
  }

  .booking-table th,
  .booking-table td {
    padding: 15px 18px;
    text-align: left;
    border-bottom: 1px solid #333;
  }

  .booking-table th {
    background-color: #222;
    font-weight: 600;
    position: sticky;
    top: 0;
    z-index: 10;
  }

  .booking-table tr:last-child td {
    border-bottom: none;
  }

  .booking-table tr:hover {
    background-color: #2c2c2c;
  }

  .booking-table .sortable {
    cursor: pointer;
  }

  .booking-table .sortable:after {
    content: "↓";
    margin-left: 5px;
    opacity: 0.5;
  }

  .user-info .user-name {
    font-weight: 500;
    margin-bottom: 4px;
  }

  .contact-info {
    display: flex;
    flex-direction: column;
    gap: 5px;
    font-size: 14px;
  }

  .date-time {
    display: flex;
    flex-direction: column;
    gap: 3px;
  }

  .date-time .date {
    font-weight: 500;
  }

  .date-time .time {
    color: #aaa;
    font-size: 14px;
  }

  .status-selector {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .status-badge {
    display: inline-block;
    padding: 4px 8px;
    font-size: 12px;
    font-weight: 500;
    min-width: 90px;
    text-align: center;
  }

  .status-pending {
    background-color: #553c00;
    color: #ffbb00;
  }

  .status-confirmed {
    background-color: #003b5c;
    color: #47a3f3;
  }

  .status-completed {
    background-color: #044a2a;
    color: #16c172;
  }

  .status-cancelled {
    background-color: #570a0a;
    color: #ff6b6b;
  }

  .status-dropdown {
    background-color: #2d2d2d;
    color: #ddd;
    border: 1px solid #444;
    padding: 4px 8px;
    cursor: pointer;
  }

  .booking-table button {
    background-color: #2d2d2d;
    color: #fff;
    border: 1px solid #444;
    padding: 6px 10px;
    cursor: pointer;
    transition: all 0.2s ease;
    display: inline-flex;
    align-items: center;
    justify-content: center;
  }

  .booking-table button.view-details-button {
    background-color: #222;
    color: #fff;
    padding: 6px 12px;
  }

  .delete-button {
    color: #ff6b6b !important;
  }

  .booking-table button:hover {
    background-color: #444;
    transform: translateY(-1px);
  }

  .refresh-button {
    background-color: #333;
    color: white;
    border: none;
    padding: 8px 15px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 5px;
    min-height: 50px;
  }

  .no-data {
    text-align: center;
    padding: 30px !important;
    color: #888;
  }

  tr.status-cancelled td {
    opacity: 0.6;
  }

  /* Modal styles */
  .booking-modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0,0,0,0.6);
    padding: 20px;
  }

  .modal-content {
    background-color: #1a1a1a;
    margin: 5% auto;
    padding: 30px;
    border: 1px solid #444;
    width: 80%;
    max-width: 700px;
    animation: modalFade 0.3s;
    box-shadow: 0 5px 20px rgba(0,0,0,0.3);
    position: relative;
  }

  @keyframes modalFade {
    from {opacity: 0; transform: translateY(-20px);}
    to {opacity: 1; transform: translateY(0);}
  }

  .close-modal {
    position: absolute;
    top: 15px;
    right: 20px;
    color: #aaa;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
  }

  .close-modal:hover {
    color: #fff;
  }

  .booking-details {
    margin-top: 20px;
  }

  .detail-group {
    margin-bottom: 25px;
    padding-bottom: 20px;
    border-bottom: 1px solid #333;
  }

  .detail-group:last-child {
    border-bottom: none;
    margin-bottom: 10px;
  }

  .detail-group h4 {
    margin-bottom: 15px;
    font-size: 16px;
    color: #ccc;
  }

  .booking-details p {
    margin: 8px 0;
    font-size: 15px;
  }

  .modal-actions {
    display: flex;
    justify-content: flex-end;
    gap: 15px;
    margin-top: 20px;
  }

  .modal-actions button {
    padding: 8px 16px;
    border: none;
    cursor: pointer;
    font-weight: 500;
  }

  .confirm-button {
    background-color: #16c172;
    color: #000;
  }

  .cancel-button {
    background-color: #ff6b6b;
    color: #fff;
  }

  /* Form styles */
  .form-group {
    margin-bottom: 20px;
  }

  .form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: #ddd;
  }

  .form-group input,
  .form-group select,
  .form-group textarea {
    width: 100%;
    padding: 10px;
    background-color: #222;
    border: 1px solid #444;
    color: #fff;
  }

  .form-actions {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-top: 20px;
  }

  .form-actions button {
    padding: 8px 16px;
    border: none;
    cursor: pointer;
  }

  .form-actions button#save-edit {
    background-color: #16c172;
    color: #000;
  }

  .form-actions button#cancel-edit {
    background-color: #333;
    color: #fff;
  }

  /* Notification styles */
  .notification {
    position: fixed;
    bottom: 20px;
    right: 20px;
    padding: 15px 25px;
    color: white;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    z-index: 1000;
    transform: translateY(100px);
    opacity: 0;
    transition: all 0.3s ease;
  }

  .notification.show {
    transform: translateY(0);
    opacity: 1;
  }

  .notification-success {
    background-color: #16c172;
    border-left: 5px solid #044a2a;
  }

  .notification-error {
    background-color: #ff6b6b;
    border-left: 5px solid #570a0a;
  }

  .notification-info {
    background-color: #47a3f3;
    border-left: 5px solid #003b5c;
  }
  
  @media (max-width: 768px) {
    .admin-header {
      flex-direction: column;
      align-items: flex-start;
    }
    
    .booking-stats {
      flex-direction: column;
    }
    
    .search-filter {
      flex-direction: column;
      width: 100%;
    }
    
    .admin-actions {
      flex-direction: column;
      align-items: flex-start;
      width: 100%;
    }
    
    .refresh-button {
      width: 100%;
      justify-content: center;
    }
    
    .modal-content {
      width: 95%;
      padding: 20px;
    }
    
    .modal-actions {
      flex-direction: column;
    }
    
    .modal-actions button {
      width: 100%;
    }
  }

  .admin-booking h2 {
    text-align: left;
    color: #ffffff;
    font-size: 28px;
    margin: 0;
  }
</style>
